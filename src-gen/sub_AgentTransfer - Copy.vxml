<?xml version="1.0" encoding="utf-8"?>
<vxml version="2.1" xml:lang="en-US"
		xmlns="http://www.w3.org/2001/vxml"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:gvp="http://www.genesyslab.com/2006/vxml21-extension" application="../src/ComposerRoot.vxml">

	
	<!-- VXML code generated by Composer 8.1.450.20 -->
	<!-- Diagram created by Composer: Composer 8.1.510.12 -->
	<!-- Project version: 8.1.450.20 -->
	<!-- Diagram version: 1.0 CreatedOn:  -->
	<!-- Application Author:  -->
	<!-- Release Mode: false -->

	<!-- Global Scripts includes -->
	<script src="../include/common.js" />
	<script src="../include/ctic.js" />
	<script src="../include/json.js" />
	<script src="../include/DataAccess.js" />

	<!-- Global Vars declarations -->
	<script>
		var AppState = new Object();
		AppState.System = new Object();
		AppState.System.RetainInputTypeVariableDefaultValue = false;
		AppState.CallUUID = session.connection.uuid;
		AppState.ANI = getANI();
		AppState.DNIS = getDNIS();
		AppState.USE_LCASE_USERDATAKEY = initSystemTypeVariable('USE_LCASE_USERDATAKEY',0);
  		
  		if (session.connection.protocol.sip.headers != undefined &amp;&amp;
			    session.connection.protocol.sip.headers['x-genesys-gvp-session-id']){
			AppState.GVPSessionID = session.connection.protocol.sip.headers['x-genesys-gvp-session-id'];
			AppState.g_CTICCall = isCTICCall(AppState.GVPSessionID);
		} else {
			AppState.GVPSessionID = 'undefined';
			AppState.g_CTICCall = 'false';
		}
  			
		
		AppState.APP_ASR_LANGUAGE = initSystemTypeVariable('APP_ASR_LANGUAGE','en-US');
		AppState.APP_LANGUAGE = initSystemTypeVariable('APP_LANGUAGE','en-US');
		AppState.CallStartDate = '';
		AppState.CallStartTime = '';
		AppState.COMPOSER_WSSTUBBING = initSystemTypeVariable('COMPOSER_WSSTUBBING','0');
		AppState.Con_Chk_Acc_no = '';
		AppState.Con_Chk_Mob = '';
		AppState.EnableFCR = initSystemTypeVariable('EnableFCR',true);
		AppState.EnableReports = initSystemTypeVariable('EnableReports',false);
		AppState.EnableSNMP = initSystemTypeVariable('EnableSNMP',false);
		AppState.GRAMMARFILEDIR = initSystemTypeVariable('GRAMMARFILEDIR','../Resources/Grammars');
		AppState.IVR_AccNumber = '';
		AppState.IVR_AccNumberIWS = '';
		AppState.IVR_AccStatus = '';
		AppState.IVR_ActCode = '';
		AppState.IVR_ANI = '';
		AppState.IVR_AuthFlag = '';
		AppState.IVR_CallerStatus = '';
		AppState.IVR_CallStartTime = '';
		AppState.IVR_CCAuthAction = '';
		AppState.IVR_Custsegment = '';
		AppState.IVR_EnrollStatus = '';
		AppState.IVR_Escalation = '';
		AppState.IVR_Language = '';
		AppState.IVR_LastMenu = '';
		AppState.IVR_MenuTraversal = '';
		AppState.IVR_Name = '';
		AppState.IVR_ProductCode = '';
		AppState.IVR_Productinfo = '';
		AppState.IVR_Region = '';
		AppState.IVR_ReturnResult = '';
		AppState.IVR_RMN_Number = '';
		AppState.IVR_RMNCallerFlag = '';
		AppState.IVR_RoutingProductType = '';
		AppState.IVR_Skill = '';
		AppState.IVR_UnicaCode = '';
		AppState.IVR_UUID = '';
		AppState.IVR_VBEnrollStatus = '';
		AppState.IWS_Enrolled = '';
		AppState.LAST_EVENT_ELEMENT = initSystemTypeVariable('LAST_EVENT_ELEMENT','undefined');
		AppState.LAST_EVENT_LINE = initSystemTypeVariable('LAST_EVENT_LINE','undefined');
		AppState.LAST_EVENT_MSG = initSystemTypeVariable('LAST_EVENT_MSG','undefined');
		AppState.LAST_EVENT_NAME = initSystemTypeVariable('LAST_EVENT_NAME','undefined');
		AppState.LAST_EVENT_URL = initSystemTypeVariable('LAST_EVENT_URL','undefined');
		AppState.OCS_Record = initSystemTypeVariable('OCS_Record',getCallflowOCSRecord());
		AppState.OCS_RecordURI = initSystemTypeVariable('OCS_RecordURI',getCallflowRecordURI());
		AppState.OCS_URI = initSystemTypeVariable('OCS_URI',getCallflowOCSURI());
		AppState.PREV_APP_ASR_LANGUAGE = initSystemTypeVariable('PREV_APP_ASR_LANGUAGE','undefined');
		AppState.PREV_APP_LANGUAGE = initSystemTypeVariable('PREV_APP_LANGUAGE','undefined');
		AppState.SCRIPTSDIR = initSystemTypeVariable('SCRIPTSDIR','../Scripts');
		AppState.VA_DETAILS = '';
		AppState.vAccNumber = '';
		AppState.vANI = '';
		AppState.varAccEscFlag = '';
		AppState.varAccFraudFlag = '';
		AppState.varAuthNum = '';
		AppState.varCLIAccNum = '';
		AppState.varCLIEscFlag = '';
		AppState.varCLIFraudFlag = '';
		AppState.varDebitCard = '';
		AppState.varFSID = '';
		AppState.varLang = '';
		AppState.varTaxAuthFlag = '';
		AppState.varTravProduct = '';
		AppState.varUNSFlag = '';
		AppState.varUserID = '';
		AppState.varWealthFlag = '';
		AppState.vAuthFlag = '';
		AppState.vBusinessSegment = '';
		AppState.vBusinessUnit = '';
		AppState.vCallEndReason = '';
		AppState.vCallerType = '';
		AppState.vCallType = '';
		AppState.vCustseg = '';
		AppState.vLang = '';
		AppState.vLanguage = '';
		AppState.vMenuInput = '';
		AppState.vMultipleFlag = '';
		AppState.vOPMValues = '';
		AppState.VOXFILEDIR = initSystemTypeVariable('VOXFILEDIR','../Resources/Prompts');
		AppState.vProductInfo = '';
		AppState.vProductType = '';
		AppState.vReturnReason = '';
		AppState.vSingleFlag = '';
		AppState.vSubCallFlag = '';
		AppState.vTransDestination = '';
		AppState.vTransDestinationOut = '';
		AppState.vTrav1 = '';
		AppState.vTrav2 = '';
		AppState.vTrav3 = '';
		AppState.vTrav4 = '';
		AppState.vTrav5 = '';
		AppState.vEnrollmentFlag = '';
		AppState.vIVRstring = '';
		AppState.vLangFlag = '';
		AppState.ContactPhoneNumber = '';
		AppState.ContactAccountNumber = '';
		AppState.vTravString = '';
		AppState.vTrav_IWS = '';
		AppState.vTimeLogic = '';
	</script>

		
	<!-- Global Scripts -->
	<script srcexpr="AppState.VOXFILEDIR + '/PromptSwitch.js'" />
	<script srcexpr="AppState.VOXFILEDIR + '/en-US/en-US.js'" />
	<script srcexpr="AppState.VOXFILEDIR + '/en-IN/en-IN.js'" />
	<script srcexpr="AppState.VOXFILEDIR + '/hi-IN/hi-IN.js'" />
	<script srcexpr="AppState.VOXFILEDIR + '/mr-IN/mr-IN.js'" />
	<script srcexpr="AppState.VOXFILEDIR + '/ta-IN/ta-IN.js'" />
	<script>var f = new Format();</script>

	
	<script srcexpr="AppState.VOXFILEDIR + '/en-US/customprompts.js'" />
	<script srcexpr="AppState.VOXFILEDIR + '/en-IN/customprompts.js'" />
	<script srcexpr="AppState.VOXFILEDIR + '/hi-IN/customprompts.js'" />
	<script srcexpr="AppState.VOXFILEDIR + '/mr-IN/customprompts.js'" />
	<script srcexpr="AppState.VOXFILEDIR + '/ta-IN/customprompts.js'" />
	
	
	<!-- Global Properties declarations -->
	<property name="com.genesyslab.logtoasr" value="false" />   	
	<property name="com.genesyslab.loglevel" value="5" />

	<!-- Metadata information -->
	<meta name="com.genesyslab.studio.resourcePath" content="/Callflows/sub_AgentTransfer.callflow"/>

	<!-- Global links -->
	<form>	
		<!-- VAR Parent Action Param -->
		<var name="varActionParentId" expr="''"/>
		<var name="ObjCall" expr="''"/>
		<block name="paramAssignment">
			<assign name="AppState.ObjCall" expr="ObjCall"/>
		</block>
		<block name="varAction">
			<if cond="varActionParentId==''">
				<log label="com.genesyslab.var.ActionStart" gvp:cond="AppState.EnableReports">sub_AgentTransfer</log>
			<else/>
				<log label="com.genesyslab.var.ActionStart" gvp:cond="AppState.EnableReports">sub_AgentTransfer|parentID=<value expr="varActionParentId"/></log>
			</if>
		</block>
		<block>
			<log expr="'Running sub_AgentTransfer workflow.'"/>
			<log expr="'Code Generated by Composer: 8.1.450.20.'"/>
			<log expr="'Diagram created/upgraded by Composer: Composer 8.1.510.12.'"/>
			<log expr="'Project version: 8.1.450.20.'"/>
			<log expr="'Diagram version: 1.0 CreatedOn: .'"/>
			<goto next="#Entry_AgentTransfer" />
		</block>
	</form>
	<!-- This is the Entry block -->
	<form id="Entry_AgentTransfer">
		<block name="Entry">
			<goto next="#Branching_BusinessSegment" />
		</block>
	</form>	
	
	<catch event="error.semantic">
		<assign name="AppState.LAST_EVENT_ELEMENT" expr="_element"/>
    	<assign name="AppState.LAST_EVENT_MSG" expr="_message"/>
    	<assign name="AppState.LAST_EVENT_NAME" expr="_event"/>
    	<assign name="AppState.LAST_EVENT_LINE" expr="_line"/>
    	<assign name="AppState.LAST_EVENT_URL" expr="_url"/>
		<goto next="#Assign_Semantic" />
    </catch>
	<catch event="connection.disconnect.hangup">
		<assign name="AppState.LAST_EVENT_ELEMENT" expr="_element"/>
    	<assign name="AppState.LAST_EVENT_MSG" expr="_message"/>
    	<assign name="AppState.LAST_EVENT_NAME" expr="_event"/>
    	<assign name="AppState.LAST_EVENT_LINE" expr="_line"/>
    	<assign name="AppState.LAST_EVENT_URL" expr="_url"/>
		<goto next="#Assign_HangUp" />
    </catch>
	<catch event="error">
		<assign name="AppState.LAST_EVENT_ELEMENT" expr="_element"/>
    	<assign name="AppState.LAST_EVENT_MSG" expr="_message"/>
    	<assign name="AppState.LAST_EVENT_NAME" expr="_event"/>
    	<assign name="AppState.LAST_EVENT_LINE" expr="_line"/>
    	<assign name="AppState.LAST_EVENT_URL" expr="_url"/>
		<goto next="#Assign_HangUp" />
    </catch>
	<catch event=".">
		<assign name="AppState.LAST_EVENT_ELEMENT" expr="_element"/>
    	<assign name="AppState.LAST_EVENT_MSG" expr="_message"/>
    	<assign name="AppState.LAST_EVENT_NAME" expr="_event"/>
    	<assign name="AppState.LAST_EVENT_LINE" expr="_line"/>
    	<assign name="AppState.LAST_EVENT_URL" expr="_url"/>
		<goto next="#Assign_HangUp" />
    </catch>    
    

	<!-- This is the Exit block -->
	<form id="Exit_AgentTransfer">
		<block>
			<log label="com.genesyslab.var.ActionEnd" gvp:cond="AppState.EnableReports">sub_AgentTransfer|UNKNOWN</log>
			<var name="ObjCall" expr="AppState.ObjCall"/>
			<return namelist="ObjCall"/>
  		</block>
	</form>

	<!-- This is the Branching block -->
	<form id="Branching_ChkNuance">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.IVR_EnrollStatus is '+AppState.ObjCall.IVR_EnrollStatus;"/>
			</log>
    	</block>
		<block>
			<if cond="AppState.ObjCall.IVR_EnrollStatus=='Enrolled'">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.IVR_EnrollStatus='enrolled'
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Productcode" />
			</if>
			<if cond="AppState.ObjCall.IVR_EnrollStatus=='Not Enrolled'">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.IVR_EnrollStatus='notenrolled'
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Segment" />
			</if>
			<if cond="AppState.ObjCall.IVR_EnrollStatus=='' || AppState.ObjCall.IVR_EnrollStatus==' ' || AppState.ObjCall.IVR_EnrollStatus=='null' || AppState.ObjCall.IVR_EnrollStatus=='undefined';">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.IVR_EnrollStatus='notenrolled'
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Segment" />
			</if>
			<goto next="#Branching_Segment" />
		</block>
	</form>

	<!-- This is the Assign block -->
	<form id="Assign_HangUp">
		<block>
			
			<assign name="AppState.vTrav1" expr="'Please enter a value or an Expression'" />				
			<goto next="#ECMAScript_ReturnObj" />
		</block>
	</form>

	<!-- This is the Assign block -->
	<form id="Assign_Semantic">
		<block>
			
			<assign name="AppState.vTrav1" expr="'Please enter a value or an Expression'" />				
			<goto next="#ECMAScript_ReturnObj" />
		</block>
	</form>

	<!-- This is the Assign block -->
	<form id="ECMAScript_ReturnObj">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.vAtmPinResult is '+AppState.vAtmPinResult;"/>
			</log>
    	</block>
		<block>
			<script>
				AppState.ObjCall.vSubCallFlag=AppState.vSubCallFlag;
					AppState.ObjCall.vAtmPinResult=AppState.vAtmPinResult;
			</script>	
			<goto next="#Copy_1_ECMAScript_AssigntoCallEndReason" />
		</block>
	</form>

	<!-- This is the Branching block -->
	<form id="Branching_BusinessSegment">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vBusinessSegment is '+AppState.ObjCall.vBusinessSegment;"/>
			</log>
    	</block>
		<block>
			<if cond="AppState.ObjCall.vBusinessUnit=='RETAIL'">
				
				<!-- This is the OutLink -->
				<goto next="#Branching_ChkNuance" />
			</if>
			<if cond="AppState.ObjCall.vBusinessUnit=='WEALTH'">
				
				<!-- This is the OutLink -->
				<goto next="#Branching_ChkNuance" />
			</if>
			<if cond="AppState.ObjCall.vBusinessUnit=='NRI'">
				
				<!-- This is the OutLink -->
				<goto next="#Branching_ChkNuance" />
			</if>
			<goto next="#Branching_ChkNuance" />
		</block>
	</form>

	<!-- This is the Branching block -->
	<form id="Branching_Product">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.IVR_ProductCode is '+AppState.ObjCall.IVR_ProductCode;"/>
			</log>
    	</block>
		<block>
			<if cond="AppState.ObjCall.IVR_ProductCode=='CC';">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.IVR_ProductCode='cc';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#ECMAScript_ServiceType" />
			</if>
			<if cond="AppState.ObjCall.IVR_ProductCode=='DC';">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.IVR_ProductCode='dc';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#ECMAScript_ServiceType" />
			</if>
			<if cond="AppState.ObjCall.IVR_ProductCode=='';">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.IVR_ProductCode=AppState.ObjCall.vProductType
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#ECMAScript_ServiceType" />
			</if>
			<goto next="#ECMAScript_ServiceType" />
		</block>
	</form>

	<!-- This is the Transfer block -->
	<form id="Transfer_RoutePoint">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.vTransDestination is '+AppState.vTransDestination;"/>
			</log>
    	</block>
		<property name="inputmodes" value="dtmf" />
	    <transfer name="Transfer_RoutePointCall" type="blind" destexpr="AppState.vTransDestination" gvp:method="refer" 
	    		gvp:analysis="false" gvp:connectwhen="immediate" >	
    	</transfer>
	</form>

	<!-- This is the Assign block -->
	<form id="ECMAScript_ServiceType">
		<block>
			<script>
				try {
										__Log('****UNS AppState.ObjCall.vSelectSrvTime  is :  '+AppState.ObjCall.vSelectSrvTime);
										if(AppState.ObjCall.vSelectSrvTime =='True')
										{
										AppState.ObjCall.vsubServiceType='UNS';
										}
										__Log('****UNS AppState.ObjCall.vsubServiceType  is :  '+AppState.ObjCall.vsubServiceType);
										
										if(AppState.ObjCall.vServiceType == '' || AppState.ObjCall.vServiceType  == ' ' ||AppState.ObjCall.vServiceType == 'null' ||AppState.ObjCall.vServiceType == 'undefined' ||AppState.ObjCall.vServiceType == null ||AppState.ObjCall.vServiceType == null  ||AppState.ObjCall.vServiceType == 'null null'){
										AppState.ObjCall.vServiceType='agenttransfer'                                                              
										}
										if(AppState.ObjCall.vsubServiceType == '' || AppState.ObjCall.vsubServiceType  == ' ' ||AppState.ObjCall.vsubServiceType == 'null' ||AppState.ObjCall.vsubServiceType == 'undefined' ||AppState.ObjCall.vsubServiceType == null ||AppState.ObjCall.vsubServiceType == null  ||AppState.ObjCall.vsubServiceType == 'null null'){
										AppState.ObjCall.vsubServiceType='success'
										}
										AppState.vCallType=AppState.ObjCall.vBusinessSegment+'_'+AppState.ObjCall.IVR_EnrollStatus+'_'+AppState.ObjCall.vCustType+'_'+AppState.ObjCall.IVR_ProductCode+'_'+AppState.ObjCall.vServiceType+'_'+AppState.ObjCall.vsubServiceType
										 __Log('****AppState.vCallType  is :  '+AppState.vCallType);
										 AppState.vCallType=AppState.vCallType.toLowerCase(AppState.vCallType);
										AppState.ObjCall.vCallType=AppState.vCallType;
										 
										 try {
										 //New code For the string which are having &quot;|&quot; while creating vCallType
										if(AppState.vCustType.search('|')!=-1)
										{
										if(AppState.ObjCall.IVR_ProductCode=='dc'){
										AppState.vCallType='default_default_default_dc_default_default';
										}
										else if(AppState.ObjCall.IVR_ProductCode=='cc'){
										AppState.vCallType='default_default_default_cc_default_default';
										}
										else{
										AppState.vCallType='default_default_default_other_default_default';
										}
										}} catch (error) {
										__log('****ERROR in New code For the string which are having &quot;|&quot; while creating vCallType');
										}
										 
										AppState.vCallType=AppState.vCallType.toLowerCase(AppState.vCallType);
										AppState.ObjCall.vCallType=AppState.vCallType;
										} catch (error) {
											// error handling code
										}
			</script>	
			<goto next="#Log_SendCallType" />
		</block>
	</form>

	<!-- This is the Log block -->
	<form id="Log_SendCallType">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.vCallType is '+AppState.vCallType;"/>
			</log>
    	</block>
    	<block>
    		<goto next="#Subdialog_OPMFetch" />
    	</block>
	</form>

	<!-- This is the Subdialog block -->
	<form id="Subdialog_OPMFetch">

		<subdialog name="Subdialog_OPMFetchSubdialog" fetchhint="prefetch"  src="http://ivrvxml.icicibankltd.com:8088/IVR_JavaOPMFetch/src-gen/subcallflowFetchOPM.vxml">
			<param name="vParamGroup" expr="AppState.vCallType" />
			<filled>
				<if cond="Subdialog_OPMFetchSubdialog.vOPMValues != 'undefined'">
  					<assign name="AppState.vOPMValues" expr="Subdialog_OPMFetchSubdialog.vOPMValues" /> 
  				</if>
				<goto next="#ECMAScript_OPM_Status" />
			</filled>
		</subdialog>
		
	</form>

	<!-- This is the Log block -->
	<form id="Log_TransDestinationOut">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.vOPMValues is '+JSON.stringify(AppState.vOPMValues);"/>
			</log>
    	</block>
    	<block>
    		<goto next="#ECMAScriptTransdestinationOut" />
    	</block>
	</form>

	<!-- This is the Assign block -->
	<form id="ECMAScriptTransdestinationOut">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.DNIS is '+AppState.DNIS;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ANI is '+AppState.ANI;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vAccNum is '+AppState.ObjCall.vAccNum;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.vLanguage is '+AppState.vLanguage;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vLang is '+AppState.ObjCall.vLang;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vCustType is '+AppState.ObjCall.vCustType;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vCustName is '+AppState.ObjCall.vCustName;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.IVR_RMNCallerFlag is '+AppState.ObjCall.IVR_RMNCallerFlag;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.IVR_AccStatus is '+AppState.ObjCall.IVR_AccStatus;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.IVR_Skill is '+AppState.ObjCall.IVR_Skill;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vMobileNo is '+AppState.ObjCall.vMobileNo;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.IVR_EnrollStatus is '+AppState.ObjCall.IVR_EnrollStatus;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vDebitCardCRNInput is '+AppState.ObjCall.vDebitCardCRNInput;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vUserID is '+AppState.ObjCall.vUserID;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vFSID is '+AppState.ObjCall.vFSID;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vCliaccNum is '+AppState.ObjCall.vCliaccNum;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vProductInfo is '+AppState.ObjCall.vProductInfo;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.IVR_ProductCode is '+AppState.ObjCall.IVR_ProductCode;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_AuthFlag is:'+AppState.ObjCall.IVR_AuthFlag"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.VA_DETAILS is '+AppState.ObjCall.VA_DETAILS;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vAccStatus is '+ AppState.ObjCall.vAccStatus;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vTrav4 is '+ AppState.ObjCall.vTrav4;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.varAccEscFlag='+AppState.ObjCall.varAccEscFlag;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.varCLIEscFlag='+AppState.ObjCall.varCLIEscFlag;"/>
			</log>
    	</block>
		<block>
			<script>
				try {
					
					//Assigning IWS Display Lang
					
					if(AppState.ObjCall.vLang == 'en-IN'){
						AppState.vLanguage='English';
						AppState.vLangFlag='E';
					}else if(AppState.ObjCall.vLang == 'hi-IN'){
						AppState.vLanguage='Hindi';
							AppState.vLangFlag='H';
					}else if(AppState.ObjCall.vLang == 'mr-IN'){
						AppState.vLanguage='Marathi';
							AppState.vLangFlag='M';
					}else if(AppState.ObjCall.vLang == 'ta-IN'){
						AppState.vLanguage='Tamil';
							AppState.vLangFlag='T';
					}else{
						AppState.vLanguage=AppState.vLang;
							AppState.vLangFlag='';
					}
					
					//Traversal string for service
					AppState.ObjCall.vTrav1=AppState.ObjCall.vTrav1+';EI900';
					//Traversal Menu Replacing ';;' with ';' 
					try {
					__Log('****AppState.ObjCall.vTrav1 Value Before removing ;; is :  ' +AppState.ObjCall.vTrav1);
					AppState.ObjCall.vTrav1=AppState.ObjCall.vTrav1.replace(new RegExp(';;','g'), ';');
					__Log('****AppState.ObjCall.vTrav1 Value Post removing ;; is :  ' +AppState.ObjCall.vTrav1);
					}catch (error) 
					{
					__Log('****ERROR in ECMA While Preparing Traversal Menu Replacing  ');
					}
					
					//Code for inserting AT OPM Values into Local Object ObjCall
					try {
					AppState.ObjCall=JSON.parse(JSON.stringify(AppState.ObjCall).slice(0,-1)+','+JSON.stringify(AppState.vOPMValues).slice(1));	
					
					__Log('****AppState.vOPMValues.Result is :  ' +AppState.vOPMValues.Result);
					__Log('****AppState.ObjCall.o_IVRSkill is :  ' +AppState.ObjCall.o_IVRSkill);
					__Log('****AppState.ObjCall.o_TransferDestination is :  ' +AppState.ObjCall.o_TransferDestination);
					AppState.ObjCall.vAT_OPM='SUCCESS';
					if(AppState.ObjCall.o_TransferDestination == '' || AppState.ObjCall.o_TransferDestination  == ' ' ||AppState.ObjCall.o_TransferDestination == 'null' ||AppState.ObjCall.o_TransferDestination == 'undefined' ||AppState.ObjCall.o_TransferDestination == null ||AppState.ObjCall.o_TransferDestination == null  ||AppState.ObjCall.o_TransferDestination == 'null null'){
					AppState.ObjCall.o_TransferDestination='65079';
					AppState.ObjCall.vAT_OPM='MISSING OPM PARAM CUSTOM_1 IN GAX';
					}
					}catch (error) 
					{
					__Log('****ERROR in ECMA While Preparing Account Enroll Status  ');
					}
					//**********************************************************CUG TESTING***********************************************
					//AppState.ObjCall.o_TransferDestination='65555';
					
					AppState.IVR_ProductCode=AppState.ObjCall.IVR_ProductCode;
					AppState.IVR_ProductCode=AppState.IVR_ProductCode.toLowerCase(AppState.IVR_ProductCode);
					AppState.ObjCall.IVR_ProductCode=AppState.IVR_ProductCode;
					
					//UNS routing
					try {
					if(AppState.ObjCall.vCustseg.search('WS')!=-1 || AppState.ObjCall.vCustseg.search('WM')!=-1 || AppState.ObjCall.vCustseg.search('GPC')!=-1)
					{
					__Log('AppState.ObjCall.o_TransferDestination WS is : '+AppState.ObjCall.o_TransferDestination);
					}else{
					 if((AppState.ObjCall.vSelectSrvTime=='true'|| AppState.ObjCall.vSelectSrvTime=='false') &amp;&amp; (AppState.ObjCall.IVR_ProductCode=='dc'||AppState.ObjCall.IVR_ProductCode=='cc' || AppState.ObjCall.IVR_ProductCode=='loc')&amp;&amp; (AppState.ObjCall.vCustseg.search('NRI')!=-1 ))
					{
					AppState.ObjCall.o_TransferDestination='65039';
					}
					else if(AppState.ObjCall.vSelectSrvTime=='true' &amp;&amp; AppState.ObjCall.IVR_ProductCode=='cc')
					{
					AppState.ObjCall.o_TransferDestination='65247';
					}

                                     else if(AppState.ObjCall.vSelectSrvTime=='false' &amp;&amp; AppState.ObjCall.vcorpFlag=='Y')
					{
					AppState.ObjCall.o_TransferDestination='65123';
					}
					else if(AppState.ObjCall.vSelectSrvTime=='true' &amp;&amp; AppState.ObjCall.IVR_ProductCode=='loc')
					{
					AppState.ObjCall.o_TransferDestination='65247';
					}
					else if(AppState.ObjCall.vSelectSrvTime=='true' &amp;&amp; AppState.ObjCall.IVR_ProductCode=='dc')
					{
					AppState.ObjCall.o_TransferDestination='65246';
					}
					else if(AppState.ObjCall.vSelectSrvTime=='true' &amp;&amp; (AppState.ObjCall.IVR_ProductCode=='cc' || AppState.ObjCall.IVR_ProductCode=='dc'))
					{
					AppState.ObjCall.o_TransferDestination='65246';
					}
					}
					}catch (error) 
					{
					__Log('****ERROR in ECMA While Preparing Account Enroll Status  ');
					}
					
					//CR NRI Dispute Routing
					try {
					
					if (AppState.vCallType=='retail_notenrolled_nri_dc_dispute_success')
					{
						AppState.ObjCall.o_TransferDestination='65342';
					}
					else if (AppState.vCallType=='retail_notenrolled_ts_dc_dispute_success')
					{
					AppState.ObjCall.o_TransferDestination='65342';
					}
					}catch (error) 
					{
					__Log('****ERROR in ECMA While NRI Dispute ROuting  ');
					}
					
					//Account Enroll Status
					try {
					AppState.IVR_VBEnrollStatus=getIWSCLIEnrollmentStatus(AppState.ObjCall.vVBOutputString)
					
					if (AppState.IVR_VBEnrollStatus.search('undefined') &gt;0)
					{
					  AppState.IVR_VBEnrollStatus='';
					}
					}catch (error) 
					{
					__Log('****ERROR in ECMA While Preparing Account Enroll Status  ');
					}
					
					//vCustName Trim--Disha
					try {
					AppState.ObjCall.vCustName = AppState.ObjCall.vCustName.split(&quot;|&quot;).slice(0,1).toString();
					}catch (error) 
					{
					AppState.ObjCall.vCustName=AppState.ObjCall.vCustName;
					}
					
					//vCustName Trim--Vinay
					try {
					AppState.ObjCall.vCustName = AppState.ObjCall.vCustName.split(&quot;~&quot;).slice(0,1).toString();
					}catch (error) 
					{
					AppState.ObjCall.vCustName=AppState.ObjCall.vCustName;
					}
					
					if(AppState.ObjCall.vCustName == '' || AppState.ObjCall.vCustName  == ' ' ||AppState.ObjCall.vCustName == 'null' ||AppState.ObjCall.vCustName == 'undefined' ||AppState.ObjCall.vCustName == null ||AppState.ObjCall.vCustName == null  ||AppState.ObjCall.vCustName == 'null null')
					{
					AppState.ObjCall.vCustName='';
					}
					
					//WS Enrolled Acount nummber
					try {
					if((AppState.ObjCall.vProductInfo=='HCLI') || (AppState.ObjCall.vProductInfo=='LOC' &amp;&amp; AppState.ObjCall.IVR_ProductCode=='loc'))
					{
					 __Log('****ECMA While Preparing WS Enrolled Acount nummber  AppState.ObjCall.vAccNum is :  '+AppState.ObjCall.vAccNum);
					 AppState.ObjCall.vAcountNo=ModAccountNo(AppState.ObjCall.vAccNum).split('|')[0].toString();
					  __Log('****ECMA While Preparing WS Enrolled Acount nummberAppState.ObjCall.vAcountNo  '+AppState.ObjCall.vAcountNo);
					 }}catch(error){
					 __Log('****ERROR in ECMA While Preparing WS Enrolled Acount nummber  ');
					 }
					 
					 //Preparing Multiple Acc Enroll Status
					try {
					AppState.IWS_Enrolled=getmultiplecc(AppState.ObjCall.vAccNum,AppState.ObjCall.VA_DETAILS);
					__Log('****AppState.IWS_Enrolled status in FUNCTION getmultiplecc  is '+AppState.IWS_Enrolled);
					AppState.IWS_Enrolled=ModAccountNo(AppState.IWS_Enrolled);
					__Log('****AppState.IWS_Enrolled status in FUNCTION ModAccountNo  is '+AppState.IWS_Enrolled);
					}catch (error) 
					{
					AppState.IWS_Enrolled=='';
					__Log('****ERROR in ECMA While Preparing Multiple Acc Enroll Status  ');
					}
					//Blank IWS_enrolled
					if(AppState.IWS_Enrolled == '' || AppState.IWS_Enrolled  == ' ' ||AppState.IWS_Enrolled == 'null' ||AppState.IWS_Enrolled == 'undefined' ||AppState.IWS_Enrolled == null)
					{
					AppState.IWS_Enrolled=AppState.ObjCall.vAcountNo;
					}
					if(AppState.IWS_Enrolled == '' || AppState.IWS_Enrolled  == ' ' ||AppState.IWS_Enrolled == 'null' ||AppState.IWS_Enrolled == 'undefined' ||AppState.IWS_Enrolled == null)
					{
					AppState.IWS_Enrolled='';
					}
					
					if(AppState.ObjCall.vAcountNo == '' || AppState.ObjCall.vAcountNo  == ' ' ||AppState.ObjCall.vAcountNo == 'null' ||AppState.ObjCall.vAcountNo == 'undefined' ||AppState.ObjCall.vAcountNo == null)
					{
					AppState.ObjCall.vAcountNo=ModAccountNo(AppState.ObjCall.vAccNum).split('|')[0].toString();
					}
					 
					//vAccStatus Trim-DishA
					try {
					if(AppState.ObjCall.vAccStatus.search('|')!=-1)
					{
					AppState.ObjCall.vAccStatus=AppState.ObjCall.vAccStatus.split('|')[0];
					}
					else if((AppState.ObjCall.vAccStatus.search('~')!=-1))
					{
					AppState.ObjCall.vAccStatus=AppState.ObjCall.vAccStatus.split('~')[0];
					}
					else{
						AppState.ObjCall.vAccStatus=AppState.ObjCall.vAccStatus;
					}
					}catch (error) 
					{
					__Log('****ERROR in ECMA While Preparing vAccStatus Trim  ');
					}
					
					//vAccStatus Trim
					try {
					AppState.ObjCall.vAccStatus = (AppState.ObjCall.vAccStatus.split(&quot;~&quot;).slice(0,1).toString() || AppState.ObjCall.vAccStatus.split(&quot;|&quot;).slice(0,1).toString());
					}catch (error) {
					AppState.ObjCall.vAccStatus=AppState.ObjCall.vAccStatus;
					}
						// Assign Destination Route Point
						
						AppState.vTransDestination=AppState.ObjCall.o_TransferDestination;
						
						__Log('AppState.vLanguage is '+AppState.vLanguage)
						__Log('AppState.vTransDestination is '+AppState.vTransDestination)
						__Log('AppState.vCustName is '+AppState.ObjCall.vCustName)
						AppState.ObjCall.o_TransferDestination=AppState.vTransDestination;
							__Log('AppState.vTransDestination is '+AppState.ObjCall.o_TransferDestination)
							
						
						//UUID String Formation
					try{
					//Old Code String 
					//getDCCrmRMNString(AppState.IVR_ActCode,AppState.varLangFlag,AppState.varTravString,AppState.varName,AppState.varDebitCard,AppState.varCRN,AppState.CallUUID,AppState.IVR_RMNCallerFlag)
					AppState.IVR_UUID=getDCCrmRMNString(AppState.ObjCall.vTrav4,AppState.vLangFlag,AppState.vTravString,AppState.ObjCall.vCustName,AppState.ObjCall.vDebitCardCRNInput,AppState.ObjCall.vAcountNo,AppState.CallUUID,AppState.ObjCall.IVR_RMNCallerFlag);
					__Log('IVR_UUID String Value is : '+AppState.IVR_UUID)
					}
					catch(error){
					__Log('*****Error while Forming UUID String*****')
					}
						if(AppState.ObjCall.IVR_AuthFlag=='Y'){
						AppState.ObjCall.vTrav4='000';
						}else{
						AppState.ObjCall.vTrav4=AppState.ObjCall.vTrav4;
						}
						
						//Replacing undefined object value to null
					try{
					AppState.ObjCall=JSON.parse(JSON.stringify(AppState.ObjCall).replace(new RegExp('undefined','g'),''));
					__Log('After replacing undefined AppState.ObjCall value to blank  Values are : '+JSON.stringify(AppState.ObjCall));
					AppState.ObjCall=JSON.parse(JSON.stringify(AppState.ObjCall).replace(new RegExp('null','g'),''));
					__Log('After replacing null AppState.ObjCall value to blank  Values are : '+JSON.stringify(AppState.ObjCall));
					}
					catch(error){
					__Log('*****Error while Replacing undefined object value to null*****')
					}
						//Passing user data to route point
					AppState.IVR_AccNumber=AppState.ObjCall.vAccNum;
					AppState.IVR_Language=AppState.vLanguage;
					if(AppState.IVR_Language == '' || AppState.IVR_Language  == ' ' ||AppState.IVR_Language == 'null' ||AppState.IVR_Language == 'undefined' ||AppState.IVR_Language == null ||AppState.IVR_Language == null  ||AppState.IVR_Language == 'null null'){
					AppState.IVR_Language='English';
					}
					AppState.varLang=AppState.ObjCall.vLang;
					AppState.IVR_Custsegment=AppState.ObjCall.vCustseg;
					AppState.IVR_Name=AppState.ObjCall.vCustName;
					AppState.IVR_RMNCallerFlag=AppState.ObjCall.IVR_RMNCallerFlag;
					//AppState.IVR_AccStatus=AppState.ObjCall.vAccStatus;   not required
					
					//Skill captured from OPM
					AppState.IVR_Skill=AppState.vOPMValues.o_IVRSkill;
					AppState.IVR_RMN_Number=AppState.ObjCall.vMobileNo;
					AppState.varDebitCard=AppState.ObjCall.vDebitCardCRNInput;
					AppState.IVR_ANI=AppState.ANI;
					AppState.varUserID=AppState.ObjCall.vUserID;
					AppState.varFSID=AppState.ObjCall.vFSID;
					AppState.varCLIAccNum=AppState.ObjCall.vAccNum; //vCliaccNum
					if(AppState.ObjCall.IVR_ProductCode=='cc' || AppState.ObjCall.IVR_ProductCode=='CC'){
					AppState.ObjCall.vAcountNo=AppState.ObjCall.vCreditCard;
					}
					AppState.IVR_AccNumberIWS=AppState.ObjCall.vAcountNo;
					AppState.IVR_Productinfo=AppState.ObjCall.vProductInfo;
					AppState.IVR_ProductCode=AppState.ObjCall.IVR_ProductCode.toUpperCase();
					AppState.IWS_Enrolled=AppState.IWS_Enrolled;
					AppState.IVR_RoutingProductType='Retail';
					AppState.IVR_AuthFlag=AppState.ObjCall.IVR_AuthFlag;
					AppState.VA_DETAILS=AppState.ObjCall.VA_DETAILS;
					AppState.IVR_EnrollStatus=AppState.ObjCall.IVR_EnrollStatus;
					AppState.Con_Chk_Acc_no=AppState.ObjCall.Con_Chk_Acc_no;
					AppState.Con_Chk_Mob=AppState.ObjCall.Con_Chk_Mob;
					AppState.IVR_ActCode=AppState.ObjCall.vTrav4;
					
					//to send Agent transfer data
					if (AppState.IVR_EnrollStatus=='enrolled' )
					{AppState.IVR_EnrollStatus='Enrolled';}
					else if (AppState.IVR_EnrollStatus=='notenrolled' )
					{  AppState.IVR_EnrollStatus='Not Enrolled';  }
					else {AppState.IVR_EnrollStatus ='';}
					
					} catch (error) {
						// error handling code
					}
			</script>	
			<goto next="#Subdialog_Chk_RepeatCount" />
		</block>
	</form>

	<!-- This is the InteractionDataBlock block -->
	<form id="InteractionData_to_sip">
		<property name="com.genesyslab.externalevents.enable" value="false"/>
      	<property name="com.genesyslab.externalevents.queue" value="true"/>
      	
		<block>
			<if cond="AppState.g_CTICCall == 'false'" >
				<script>
					var ANI = AppState.ANI;
					var Con_Chk_Acc_no = AppState.Con_Chk_Acc_no;
					var Con_Chk_Mob = AppState.Con_Chk_Mob;
					var DNIS = AppState.DNIS;
					var IVR_AccNumber = AppState.IVR_AccNumber;
					var IVR_AccNumberIWS = AppState.IVR_AccNumberIWS;
					var IVR_ActCode = AppState.IVR_ActCode;
					var IVR_ANI = AppState.IVR_ANI;
					var IVR_AuthFlag = AppState.IVR_AuthFlag;
					var IVR_CallerStatus = AppState.IVR_CallerStatus;
					var IVR_CallStartTime = AppState.IVR_CallStartTime;
					var IVR_CCAuthAction = AppState.IVR_CCAuthAction;
					var IVR_Custsegment = AppState.IVR_Custsegment;
					var IVR_EnrollStatus = AppState.IVR_EnrollStatus;
					var IVR_Escalation = AppState.IVR_Escalation;
					var IVR_Language = AppState.IVR_Language;
					var IVR_LastMenu = AppState.IVR_LastMenu;
					var IVR_MenuTraversal = AppState.IVR_MenuTraversal;
					var IVR_Name = AppState.IVR_Name;
					var IVR_ProductCode = AppState.IVR_ProductCode;
					var IVR_Productinfo = AppState.IVR_Productinfo;
					var IVR_Region = AppState.IVR_Region;
					var IVR_ReturnResult = AppState.IVR_ReturnResult;
					var IVR_RMN_Number = AppState.IVR_RMN_Number;
					var IVR_RMNCallerFlag = AppState.IVR_RMNCallerFlag;
					var IVR_RoutingProductType = AppState.IVR_RoutingProductType;
					var IVR_Skill = AppState.IVR_Skill;
					var IVR_UnicaCode = AppState.IVR_UnicaCode;
					var IVR_UUID = AppState.IVR_UUID;
					var IVR_VBEnrollStatus = AppState.IVR_VBEnrollStatus;
					var IWS_Enrolled = AppState.IWS_Enrolled;
					var VA_DETAILS = AppState.VA_DETAILS;
					var varAccEscFlag = AppState.varAccEscFlag;
					var varAccFraudFlag = AppState.varAccFraudFlag;
					var varAuthNum = AppState.varAuthNum;
					var varCLIAccNum = AppState.varCLIAccNum;
					var varCLIEscFlag = AppState.varCLIEscFlag;
					var varCLIFraudFlag = AppState.varCLIFraudFlag;
					var varDebitCard = AppState.varDebitCard;
					var varFSID = AppState.varFSID;
					var varLang = AppState.varLang;
					var varTaxAuthFlag = AppState.varTaxAuthFlag;
					var varTravProduct = AppState.varTravProduct;
					var varUNSFlag = AppState.varUNSFlag;
					var varUserID = AppState.varUserID;
					var varWealthFlag = AppState.varWealthFlag;
					var vTrav1 = AppState.vTrav1;
					var ContactPhoneNumber = AppState.ContactPhoneNumber;
					var ContactAccountNumber = AppState.ContactAccountNumber;
				</script>
		    	<gvp:send namelist="ANI Con_Chk_Acc_no Con_Chk_Mob DNIS IVR_AccNumber IVR_AccNumberIWS IVR_ActCode IVR_ANI IVR_AuthFlag IVR_CallerStatus IVR_CallStartTime IVR_CCAuthAction IVR_Custsegment IVR_EnrollStatus IVR_Escalation IVR_Language IVR_LastMenu IVR_MenuTraversal IVR_Name IVR_ProductCode IVR_Productinfo IVR_Region IVR_ReturnResult IVR_RMN_Number IVR_RMNCallerFlag IVR_RoutingProductType IVR_Skill IVR_UnicaCode IVR_UUID IVR_VBEnrollStatus IWS_Enrolled VA_DETAILS varAccEscFlag varAccFraudFlag varAuthNum varCLIAccNum varCLIEscFlag varCLIFraudFlag varDebitCard varFSID varLang varTaxAuthFlag varTravProduct varUNSFlag varUserID varWealthFlag vTrav1 ContactPhoneNumber ContactAccountNumber" async="false"/>
			<else/>
				<!--  CTIC Case -->
				<script>
					var Action = "AttachData";
					var sub_action = "Add";
					var ANI = AppState.ANI;
					var Con_Chk_Acc_no = AppState.Con_Chk_Acc_no;
					var Con_Chk_Mob = AppState.Con_Chk_Mob;
					var DNIS = AppState.DNIS;
					var IVR_AccNumber = AppState.IVR_AccNumber;
					var IVR_AccNumberIWS = AppState.IVR_AccNumberIWS;
					var IVR_ActCode = AppState.IVR_ActCode;
					var IVR_ANI = AppState.IVR_ANI;
					var IVR_AuthFlag = AppState.IVR_AuthFlag;
					var IVR_CallerStatus = AppState.IVR_CallerStatus;
					var IVR_CallStartTime = AppState.IVR_CallStartTime;
					var IVR_CCAuthAction = AppState.IVR_CCAuthAction;
					var IVR_Custsegment = AppState.IVR_Custsegment;
					var IVR_EnrollStatus = AppState.IVR_EnrollStatus;
					var IVR_Escalation = AppState.IVR_Escalation;
					var IVR_Language = AppState.IVR_Language;
					var IVR_LastMenu = AppState.IVR_LastMenu;
					var IVR_MenuTraversal = AppState.IVR_MenuTraversal;
					var IVR_Name = AppState.IVR_Name;
					var IVR_ProductCode = AppState.IVR_ProductCode;
					var IVR_Productinfo = AppState.IVR_Productinfo;
					var IVR_Region = AppState.IVR_Region;
					var IVR_ReturnResult = AppState.IVR_ReturnResult;
					var IVR_RMN_Number = AppState.IVR_RMN_Number;
					var IVR_RMNCallerFlag = AppState.IVR_RMNCallerFlag;
					var IVR_RoutingProductType = AppState.IVR_RoutingProductType;
					var IVR_Skill = AppState.IVR_Skill;
					var IVR_UnicaCode = AppState.IVR_UnicaCode;
					var IVR_UUID = AppState.IVR_UUID;
					var IVR_VBEnrollStatus = AppState.IVR_VBEnrollStatus;
					var IWS_Enrolled = AppState.IWS_Enrolled;
					var VA_DETAILS = AppState.VA_DETAILS;
					var varAccEscFlag = AppState.varAccEscFlag;
					var varAccFraudFlag = AppState.varAccFraudFlag;
					var varAuthNum = AppState.varAuthNum;
					var varCLIAccNum = AppState.varCLIAccNum;
					var varCLIEscFlag = AppState.varCLIEscFlag;
					var varCLIFraudFlag = AppState.varCLIFraudFlag;
					var varDebitCard = AppState.varDebitCard;
					var varFSID = AppState.varFSID;
					var varLang = AppState.varLang;
					var varTaxAuthFlag = AppState.varTaxAuthFlag;
					var varTravProduct = AppState.varTravProduct;
					var varUNSFlag = AppState.varUNSFlag;
					var varUserID = AppState.varUserID;
					var varWealthFlag = AppState.varWealthFlag;
					var vTrav1 = AppState.vTrav1;
					var ContactPhoneNumber = AppState.ContactPhoneNumber;
					var ContactAccountNumber = AppState.ContactAccountNumber;
				</script>
				<gvp:send namelist="Action sub_action ANI Con_Chk_Acc_no Con_Chk_Mob DNIS IVR_AccNumber IVR_AccNumberIWS IVR_ActCode IVR_ANI IVR_AuthFlag IVR_CallerStatus IVR_CallStartTime IVR_CCAuthAction IVR_Custsegment IVR_EnrollStatus IVR_Escalation IVR_Language IVR_LastMenu IVR_MenuTraversal IVR_Name IVR_ProductCode IVR_Productinfo IVR_Region IVR_ReturnResult IVR_RMN_Number IVR_RMNCallerFlag IVR_RoutingProductType IVR_Skill IVR_UnicaCode IVR_UUID IVR_VBEnrollStatus IWS_Enrolled VA_DETAILS varAccEscFlag varAccFraudFlag varAuthNum varCLIAccNum varCLIEscFlag varCLIFraudFlag varDebitCard varFSID varLang varTaxAuthFlag varTravProduct varUNSFlag varUserID varWealthFlag vTrav1 ContactPhoneNumber ContactAccountNumber" async="false"/>
    			<gvp:receive maxtime="10s"/>
				<if cond="isCTICResult( application.lastmessage$ ) == 'false'">
    				<throw event="error.com.genesyslab.composer.receiveerror" messageexpr="'The received message has invalid content-type.'" />
    			</if>
    			
    			<var name="InteractionData_to_sipMessage" expr="application.lastmessage$.content"/>
				<var name="arrUserData" expr="getUserDataArray(InteractionData_to_sipMessage)"/>
				<var name="InteractionData_to_sipResult" expr="utilGetReceiveDataValue('Result', arrUserData)" />
                
				<if cond="InteractionData_to_sipResult != 'SUCCESS'">
					<var name="InteractionData_to_sipResultReason" expr="utilGetReceiveDataValue('reason', arrUserData)" />
					<if cond="InteractionData_to_sipResultReason == 'Timeout'">
						<throw event="error.com.genesyslab.composer.operationtimeout" messageexpr="InteractionData_to_sipResultReason" />
					<else/>
						<throw event="error.com.genesyslab.composer.receiveerror" messageexpr="InteractionData_to_sipResultReason" />
					</if>
		 		</if>
			</if>
    		<goto next="#Branching_65006" />
  		</block>
    	<catch event="error.com.genesyslab.composer.unsupported">
    		<goto next="#Branching_65006" />
        </catch>
    	<catch event="error.com.genesyslab.composer.receiveerror">
    		<goto next="#Branching_65006" />
        </catch>
    	<catch event="error.com.genesyslab.composer.operationtimeout">
    		<goto next="#Branching_65006" />
        </catch>
    	<catch event="error.com.genesyslab.composer.invalidkey">
    		<goto next="#Branching_65006" />
        </catch>
    	<catch event="error.badfetch.sip">
    		<goto next="#Branching_65006" />
        </catch>
	</form>

	<!-- This is the Assign block -->
	<form id="ECMAScript_PassInteractionData">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.DNIS is '+AppState.DNIS;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ANI is '+AppState.ANI;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_AccNumber is '+AppState.IVR_AccNumber;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_ReturnResult is '+AppState.IVR_ReturnResult;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_Language is '+AppState.IVR_Language;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_AuthFlag is '+AppState.IVR_AuthFlag;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_Custsegment is '+AppState.IVR_Custsegment;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_Productinfo is '+AppState.IVR_Productinfo;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.varLang is '+AppState.varLang;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_UUID is '+AppState.IVR_UUID;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_MenuTraversal is '+AppState.IVR_MenuTraversal;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_ActCode is '+AppState.IVR_ActCode;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_LastMenu is '+AppState.IVR_LastMenu;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.varDebitCard is '+AppState.varDebitCard;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IWS_Enrolled is '+AppState.IWS_Enrolled;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vVBOutputString is '+AppState.ObjCall.vVBOutputString;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_VBEnrollStatus is '+AppState.IVR_VBEnrollStatus;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_AccNumberIWS is '+AppState.IVR_AccNumberIWS;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_Name is ='+AppState.IVR_Name;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_AuthFlag is ='+AppState.IVR_AuthFlag;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_RMNCallerFlag is ='+AppState.IVR_RMNCallerFlag;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_AccStatus is ='+AppState.IVR_AccStatus;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_ANI is ='+AppState.IVR_ANI;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_Region is ='+AppState.IVR_Region;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.varUserID is ='+AppState.varUserID;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.varAuthNum is ='+AppState.varAuthNum;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.varTravProduct is ='+AppState.varTravProduct;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ContactAccountNumber is ='+AppState.ContactAccountNumber;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ContactPhoneNumber is ='+AppState.ContactPhoneNumber;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.IVR_ProductCode is ='+AppState.IVR_ProductCode;"/>
			</log>
    	</block>
		<block>
			<script>
				try 
					{
						// your code
						//Temp declared to be removed if not used
					AppState.varAccFraudFlag=AppState.ObjCall.varAccFraudFlag;
					AppState.varAccEscFlag=AppState.ObjCall.varAccEscFlag;
					AppState.varCLIFraudFlag=AppState.ObjCall.varCLIFraudFlag;
					AppState.varCLIEscFlag=AppState.ObjCall.varCLIEscFlag;
					AppState.Con_Chk_Acc_no=AppState.ObjCall.RepeatCallAcc;
					AppState.Con_Chk_Mob=AppState.ObjCall.RepeatCallMob;
					__Log('##AppState.vTrav_IWS in AT Module is :   '+AppState.vTrav_IWS);
					AppState.vTrav_IWS=AppState.vTrav_IWS.replace('Welcome Message;Welcome Message;', 'Welcome Message;');
					__Log('##AppState.vTrav_IWS Post replacing in AT Module is :   '+AppState.vTrav_IWS);
					AppState.IVR_MenuTraversal=AppState.vTrav_IWS;
					AppState.vTransDestination=AppState.ObjCall.o_TransferDestination;
					__Log('##AppState.vTransDestination in AT Module FINAL is :   '+AppState.vTransDestination);
					
					if(AppState.IVR_AccNumberIWS == '' || AppState.IVR_AccNumberIWS  == ' ' ||AppState.IVR_AccNumberIWS == 'null' ||AppState.IVR_AccNumberIWS == 'undefined' ||AppState.IVR_AccNumberIWS == null)
					{
					AppState.IVR_AccNumberIWS='';
					}
					__Log('##AppState.IVR_AccNumberIWS is :   '+AppState.IVR_AccNumberIWS) 
					__Log('##AppState.Con_Chk_Acc_no is : '+AppState.Con_Chk_Acc_no +'  AppState.Con_Chk_Mob is : '+AppState.Con_Chk_Mob +'AppState.vLanguage is : '+AppState.varAccFraudFlag +'AppState.varAccEscFlag is : '+AppState.varAccEscFlag +'AppState.varCLIFraudFlag is : '+AppState.varCLIFraudFlag +'AppState.vLanguage is : '+AppState.varCLIEscFlag);
					
					/**Account Number Amit*/
					if(AppState.IVR_AccNumber == '' || AppState.IVR_AccNumber  == ' ' ||AppState.IVR_AccNumber == 'null' ||AppState.IVR_AccNumber == 'undefined' ||AppState.IVR_AccNumber == null)
					{
					AppState.IVR_AccNumber='';
					}
					__Log('##AppState.IVR_AccNumber is :   '+AppState.IVR_AccNumber) 
					__Log('##AppState.Con_Chk_Acc_no is : '+AppState.Con_Chk_Acc_no +'  AppState.Con_Chk_Mob is : '+AppState.Con_Chk_Mob +'AppState.vLanguage is : '+AppState.varAccFraudFlag +'AppState.varAccEscFlag is : '+AppState.varAccEscFlag +'AppState.varCLIFraudFlag is : '+AppState.varCLIFraudFlag +'AppState.vLanguage is : '+AppState.varCLIEscFlag);
					
					/* Multiple Account n**/
					if(AppState.varCLIAccNum == '' || AppState.varCLIAccNum  == ' ' ||AppState.varCLIAccNum == 'null' ||AppState.varCLIAccNum == 'undefined' ||AppState.varCLIAccNum == null)
					{
					AppState.varCLIAccNum='';
					}
					__Log('##AppState.varCLIAccNum is :   '+AppState.varCLIAccNum) 
						__Log('##AppState.Con_Chk_Acc_no is : '+AppState.Con_Chk_Acc_no +'  AppState.Con_Chk_Mob is : '+AppState.Con_Chk_Mob +'AppState.vLanguage is : '+AppState.varAccFraudFlag +'AppState.varAccEscFlag is : '+AppState.varAccEscFlag +'AppState.varCLIFraudFlag is : '+AppState.varCLIFraudFlag +'AppState.vLanguage is : '+AppState.varCLIEscFlag);
					if(AppState.IVR_ANI=='' ||AppState.IVR_ANI=='null')
						{
						AppState.IVR_ANI=AppState.ANI;
						} 
					}
					 catch (error) 
					 {
					// error handling code
					}
			</script>	
			<goto next="#Branching_SendEnrollFlag" />
		</block>
	</form>

	<!-- This is the Branching block -->
	<form id="Branching_SendEnrollFlag">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.IVR_MenuTraversal is : '+AppState.IVR_MenuTraversal"/>
			</log>
    	</block>
		<block>
			<if cond="AppState.ObjCall.vServiceType=='CardBlocked'">
				
				<!-- This is the OutLink -->
				<goto next="#InteractionData_to_sip_NONUANCE" />
			</if>
			<if cond="AppState.vEnrollmentFlag=='TRUE';">
				
				<!-- This is the OutLink -->
				<goto next="#InteractionData_to_sip" />
			</if>
			<if cond="AppState.vEnrollmentFlag=='FALSE';">
				
				<!-- This is the OutLink -->
				<goto next="#InteractionData_to_sip_NONUANCE" />
			</if>
			<goto next="#InteractionData_to_sip_NONUANCE" />
		</block>
	</form>

	<!-- This is the InteractionDataBlock block -->
	<form id="InteractionData_to_sip_NONUANCE">
		<property name="com.genesyslab.externalevents.enable" value="false"/>
      	<property name="com.genesyslab.externalevents.queue" value="true"/>
      	
		<block>
			<if cond="AppState.g_CTICCall == 'false'" >
				<script>
					var ANI = AppState.ANI;
					var Con_Chk_Acc_no = AppState.Con_Chk_Acc_no;
					var Con_Chk_Mob = AppState.Con_Chk_Mob;
					var DNIS = AppState.DNIS;
					var IVR_AccNumber = AppState.IVR_AccNumber;
					var IVR_AccNumberIWS = AppState.IVR_AccNumberIWS;
					var IVR_ActCode = AppState.IVR_ActCode;
					var IVR_ANI = AppState.IVR_ANI;
					var IVR_AuthFlag = AppState.IVR_AuthFlag;
					var IVR_CallerStatus = AppState.IVR_CallerStatus;
					var IVR_CallStartTime = AppState.IVR_CallStartTime;
					var IVR_CCAuthAction = AppState.IVR_CCAuthAction;
					var IVR_Custsegment = AppState.IVR_Custsegment;
					var IVR_Escalation = AppState.IVR_Escalation;
					var IVR_Language = AppState.IVR_Language;
					var IVR_LastMenu = AppState.IVR_LastMenu;
					var IVR_MenuTraversal = AppState.IVR_MenuTraversal;
					var IVR_Name = AppState.IVR_Name;
					var IVR_ProductCode = AppState.IVR_ProductCode;
					var IVR_Productinfo = AppState.IVR_Productinfo;
					var IVR_Region = AppState.IVR_Region;
					var IVR_ReturnResult = AppState.IVR_ReturnResult;
					var IVR_RMN_Number = AppState.IVR_RMN_Number;
					var IVR_RMNCallerFlag = AppState.IVR_RMNCallerFlag;
					var IVR_RoutingProductType = AppState.IVR_RoutingProductType;
					var IVR_Skill = AppState.IVR_Skill;
					var IVR_UnicaCode = AppState.IVR_UnicaCode;
					var IVR_UUID = AppState.IVR_UUID;
					var varAccEscFlag = AppState.varAccEscFlag;
					var varAccFraudFlag = AppState.varAccFraudFlag;
					var varAuthNum = AppState.varAuthNum;
					var varCLIAccNum = AppState.varCLIAccNum;
					var varCLIEscFlag = AppState.varCLIEscFlag;
					var varCLIFraudFlag = AppState.varCLIFraudFlag;
					var varDebitCard = AppState.varDebitCard;
					var varFSID = AppState.varFSID;
					var varLang = AppState.varLang;
					var varTaxAuthFlag = AppState.varTaxAuthFlag;
					var varTravProduct = AppState.varTravProduct;
					var varUNSFlag = AppState.varUNSFlag;
					var varUserID = AppState.varUserID;
					var varWealthFlag = AppState.varWealthFlag;
					var vTrav1 = AppState.vTrav1;
					var ContactPhoneNumber = AppState.ContactPhoneNumber;
					var ContactAccountNumber = AppState.ContactAccountNumber;
				</script>
		    	<gvp:send namelist="ANI Con_Chk_Acc_no Con_Chk_Mob DNIS IVR_AccNumber IVR_AccNumberIWS IVR_ActCode IVR_ANI IVR_AuthFlag IVR_CallerStatus IVR_CallStartTime IVR_CCAuthAction IVR_Custsegment IVR_Escalation IVR_Language IVR_LastMenu IVR_MenuTraversal IVR_Name IVR_ProductCode IVR_Productinfo IVR_Region IVR_ReturnResult IVR_RMN_Number IVR_RMNCallerFlag IVR_RoutingProductType IVR_Skill IVR_UnicaCode IVR_UUID varAccEscFlag varAccFraudFlag varAuthNum varCLIAccNum varCLIEscFlag varCLIFraudFlag varDebitCard varFSID varLang varTaxAuthFlag varTravProduct varUNSFlag varUserID varWealthFlag vTrav1 ContactPhoneNumber ContactAccountNumber" async="false"/>
			<else/>
				<!--  CTIC Case -->
				<script>
					var Action = "AttachData";
					var sub_action = "Add";
					var ANI = AppState.ANI;
					var Con_Chk_Acc_no = AppState.Con_Chk_Acc_no;
					var Con_Chk_Mob = AppState.Con_Chk_Mob;
					var DNIS = AppState.DNIS;
					var IVR_AccNumber = AppState.IVR_AccNumber;
					var IVR_AccNumberIWS = AppState.IVR_AccNumberIWS;
					var IVR_ActCode = AppState.IVR_ActCode;
					var IVR_ANI = AppState.IVR_ANI;
					var IVR_AuthFlag = AppState.IVR_AuthFlag;
					var IVR_CallerStatus = AppState.IVR_CallerStatus;
					var IVR_CallStartTime = AppState.IVR_CallStartTime;
					var IVR_CCAuthAction = AppState.IVR_CCAuthAction;
					var IVR_Custsegment = AppState.IVR_Custsegment;
					var IVR_Escalation = AppState.IVR_Escalation;
					var IVR_Language = AppState.IVR_Language;
					var IVR_LastMenu = AppState.IVR_LastMenu;
					var IVR_MenuTraversal = AppState.IVR_MenuTraversal;
					var IVR_Name = AppState.IVR_Name;
					var IVR_ProductCode = AppState.IVR_ProductCode;
					var IVR_Productinfo = AppState.IVR_Productinfo;
					var IVR_Region = AppState.IVR_Region;
					var IVR_ReturnResult = AppState.IVR_ReturnResult;
					var IVR_RMN_Number = AppState.IVR_RMN_Number;
					var IVR_RMNCallerFlag = AppState.IVR_RMNCallerFlag;
					var IVR_RoutingProductType = AppState.IVR_RoutingProductType;
					var IVR_Skill = AppState.IVR_Skill;
					var IVR_UnicaCode = AppState.IVR_UnicaCode;
					var IVR_UUID = AppState.IVR_UUID;
					var varAccEscFlag = AppState.varAccEscFlag;
					var varAccFraudFlag = AppState.varAccFraudFlag;
					var varAuthNum = AppState.varAuthNum;
					var varCLIAccNum = AppState.varCLIAccNum;
					var varCLIEscFlag = AppState.varCLIEscFlag;
					var varCLIFraudFlag = AppState.varCLIFraudFlag;
					var varDebitCard = AppState.varDebitCard;
					var varFSID = AppState.varFSID;
					var varLang = AppState.varLang;
					var varTaxAuthFlag = AppState.varTaxAuthFlag;
					var varTravProduct = AppState.varTravProduct;
					var varUNSFlag = AppState.varUNSFlag;
					var varUserID = AppState.varUserID;
					var varWealthFlag = AppState.varWealthFlag;
					var vTrav1 = AppState.vTrav1;
					var ContactPhoneNumber = AppState.ContactPhoneNumber;
					var ContactAccountNumber = AppState.ContactAccountNumber;
				</script>
				<gvp:send namelist="Action sub_action ANI Con_Chk_Acc_no Con_Chk_Mob DNIS IVR_AccNumber IVR_AccNumberIWS IVR_ActCode IVR_ANI IVR_AuthFlag IVR_CallerStatus IVR_CallStartTime IVR_CCAuthAction IVR_Custsegment IVR_Escalation IVR_Language IVR_LastMenu IVR_MenuTraversal IVR_Name IVR_ProductCode IVR_Productinfo IVR_Region IVR_ReturnResult IVR_RMN_Number IVR_RMNCallerFlag IVR_RoutingProductType IVR_Skill IVR_UnicaCode IVR_UUID varAccEscFlag varAccFraudFlag varAuthNum varCLIAccNum varCLIEscFlag varCLIFraudFlag varDebitCard varFSID varLang varTaxAuthFlag varTravProduct varUNSFlag varUserID varWealthFlag vTrav1 ContactPhoneNumber ContactAccountNumber" async="false"/>
    			<gvp:receive maxtime="10s"/>
				<if cond="isCTICResult( application.lastmessage$ ) == 'false'">
    				<throw event="error.com.genesyslab.composer.receiveerror" messageexpr="'The received message has invalid content-type.'" />
    			</if>
    			
    			<var name="InteractionData_to_sip_NONUANCEMessage" expr="application.lastmessage$.content"/>
				<var name="arrUserData" expr="getUserDataArray(InteractionData_to_sip_NONUANCEMessage)"/>
				<var name="InteractionData_to_sip_NONUANCEResult" expr="utilGetReceiveDataValue('Result', arrUserData)" />
                
				<if cond="InteractionData_to_sip_NONUANCEResult != 'SUCCESS'">
					<var name="InteractionData_to_sip_NONUANCEResultReason" expr="utilGetReceiveDataValue('reason', arrUserData)" />
					<if cond="InteractionData_to_sip_NONUANCEResultReason == 'Timeout'">
						<throw event="error.com.genesyslab.composer.operationtimeout" messageexpr="InteractionData_to_sip_NONUANCEResultReason" />
					<else/>
						<throw event="error.com.genesyslab.composer.receiveerror" messageexpr="InteractionData_to_sip_NONUANCEResultReason" />
					</if>
		 		</if>
			</if>
    		<goto next="#Branching_65006" />
  		</block>
    	<catch event="error.com.genesyslab.composer.unsupported">
    		<goto next="#Branching_65006" />
        </catch>
    	<catch event="error.com.genesyslab.composer.receiveerror">
    		<goto next="#Branching_65006" />
        </catch>
    	<catch event="error.com.genesyslab.composer.operationtimeout">
    		<goto next="#Branching_65006" />
        </catch>
    	<catch event="error.com.genesyslab.composer.invalidkey">
    		<goto next="#Branching_65006" />
        </catch>
    	<catch event="error.badfetch.sip">
    		<goto next="#Branching_65006" />
        </catch>
	</form>

	<!-- This is the Branching block -->
	<form id="Branching_Productcode">
		<block>
			<if cond="AppState.ObjCall.IVR_ProductCode=='' || AppState.ObjCall.IVR_ProductCode==' ' || AppState.ObjCall.IVR_ProductCode=='null' || AppState.ObjCall.IVR_ProductCode=='undefined';">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.IVR_ProductCode='Default'
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Segment" />
			</if>
			<goto next="#Branching_Segment" />
		</block>
	</form>

	<!-- This is the Subdialog block -->
	<form id="Subdialog_Chk_RepeatCount">

		<subdialog name="Subdialog_Chk_RepeatCountSubdialog" fetchhint="prefetch"  src="../src-gen/sub_Repeat_Count.vxml">
    		<param name="varActionParentId" expr="'sub_AgentTransfer'"/>
			<param name="ObjCall" expr="AppState.ObjCall" />
			<filled>
				<if cond="Subdialog_Chk_RepeatCountSubdialog.ObjCall != 'undefined'">
  					<assign name="AppState.ObjCall" expr="Subdialog_Chk_RepeatCountSubdialog.ObjCall" /> 
  				</if>
				<goto next="#Subdialog_TravDetails" />
			</filled>
		</subdialog>
		
	</form>

	<!-- This is the Subdialog block -->
	<form id="Subdialog_TravDetails">

		<subdialog name="Subdialog_TravDetailsSubdialog" fetchhint="prefetch"  src="../src-gen/sub_TrvDetails.vxml">
    		<param name="varActionParentId" expr="'sub_AgentTransfer'"/>
			<param name="ObjCall" expr="AppState.ObjCall" />
			<filled>
				<if cond="Subdialog_TravDetailsSubdialog.ObjCall != 'undefined'">
  					<assign name="AppState.ObjCall" expr="Subdialog_TravDetailsSubdialog.ObjCall" /> 
  				</if>
				<if cond="Subdialog_TravDetailsSubdialog.vTrav_IWS != 'undefined'">
  					<assign name="AppState.vTrav_IWS" expr="Subdialog_TravDetailsSubdialog.vTrav_IWS" /> 
  				</if>
				<goto next="#ECMAScript_PassInteractionData" />
			</filled>
		</subdialog>
		
	</form>

	<!-- This is the Branching block -->
	<form id="Branching_Segment">
		<block>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vCustType is '+AppState.ObjCall.vCustType;"/>
			</log>
			<log gvp:level="1">
				<value expr="'AppState.ObjCall.vCustseg is '+AppState.ObjCall.vCustseg;"/>
			</log>
    	</block>
		<block>
			<if cond="(AppState.ObjCall.vCustType==''||AppState.ObjCall.vCustType==' '||AppState.ObjCall.vCustType==null||AppState.ObjCall.vCustType == 'null' ||AppState.ObjCall.vCustType== 'undefined') &amp;&amp; (AppState.ObjCall.vCustseg==''||AppState.ObjCall.vCustseg==' '||AppState.ObjCall.vCustseg==null||AppState.ObjCall.vCustseg == 'null' ||AppState.ObjCall.vCustseg== 'undefined') &amp;&amp;(AppState.ObjCall.vCustType1==''||AppState.ObjCall.vCustType1==' '||AppState.ObjCall.vCustType1==null||AppState.ObjCall.vCustType1 == 'null' ||AppState.ObjCall.vCustType1== 'undefined') &amp;&amp;(AppState.ObjCall.vCustType2==''||AppState.ObjCall.vCustType2==' '||AppState.ObjCall.vCustType2==null||AppState.ObjCall.vCustType2 == 'null' ||AppState.ObjCall.vCustType2== 'undefined');">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='gb';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='FALSE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('COL')!=-1 || (AppState.ObjCall.vCustseg).search('COL')!=-1 || (AppState.ObjCall.vCustType1).search('COL')!=-1 || (AppState.ObjCall.vCustType2).search('COL')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='ws';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='TRUE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('GPC')!=-1 || (AppState.ObjCall.vCustseg).search('GPC')!=-1 || (AppState.ObjCall.vCustType1).search('GPC')!=-1 || (AppState.ObjCall.vCustType2).search('GPC')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='ws';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='TRUE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('WS')!=-1 || (AppState.ObjCall.vCustseg).search('WS')!=-1 || (AppState.ObjCall.vCustType1).search('WS')!=-1 || (AppState.ObjCall.vCustType2).search('WS')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='ws';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='TRUE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('WM')!=-1 || (AppState.ObjCall.vCustseg).search('WM')!=-1 || (AppState.ObjCall.vCustType1).search('WM')!=-1 || (AppState.ObjCall.vCustType2).search('WM')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='ws';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='TRUE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('TS')!=-1 || (AppState.ObjCall.vCustseg).search('TS')!=-1 || (AppState.ObjCall.vCustType1).search('TS')!=-1 || (AppState.ObjCall.vCustType2).search('TS')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='ts';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='TRUE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('PB')!=-1 || (AppState.ObjCall.vCustseg).search('PB')!=-1 || (AppState.ObjCall.vCustType1).search('PB')!=-1 || (AppState.ObjCall.vCustType2).search('PB')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='gs';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='FALSE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('GS')!=-1 || (AppState.ObjCall.vCustseg).search('GS')!=-1 || (AppState.ObjCall.vCustType1).search('GS')!=-1 || (AppState.ObjCall.vCustType2).search('GS')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='gs';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='FALSE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('Z')!=-1 || (AppState.ObjCall.vCustseg).search('Z')!=-1 || (AppState.ObjCall.vCustType1).search('Z')!=-1 || (AppState.ObjCall.vCustType2).search('Z')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='gs';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='FALSE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('GB')!=-1 || (AppState.ObjCall.vCustseg).search('GB')!=-1 || (AppState.ObjCall.vCustType1).search('GB')!=-1 || (AppState.ObjCall.vCustType2).search('GB')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='gb';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='FALSE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<if cond="(AppState.ObjCall.vCustType).search('NRI')!=-1 || (AppState.ObjCall.vCustseg).search('NRI')!=-1 || (AppState.ObjCall.vCustType1).search('NRI')!=-1 || (AppState.ObjCall.vCustType2).search('NRI')!=-1;">
				
				<!-- Post Action -->
				<script>try{
				AppState.ObjCall.vCustType='nri';

//this flag is used to send/hide Enrollment status to IWS
AppState.vEnrollmentFlag='FALSE';
				}
				catch(err){}
				
				</script>
				
				<!-- This is the OutLink -->
				<goto next="#Branching_Product" />
			</if>
			<goto next="#ECMAScript_DefaultSkillAssign" />
		</block>
	</form>

	<!-- This is the Assign block -->
	<form id="ECMAScript_DefaultSkillAssign">
		<block>
			<script>
				AppState.ObjCall.vCustType='gb';
			</script>	
			<goto next="#Branching_Product" />
		</block>
	</form>

	<!-- This is the Log block -->
	<form id="Log1">
		<block>
			<log gvp:level="1">
				<value expr="AppState.vTimeLogic"/>
			</log>
			<log gvp:level="1">
				<value expr="AppState.ObjCall.IVR_FraudMenu"/>
			</log>
    	</block>
    	<block>
    		<goto next="#Branching_Time" />
    	</block>
	</form>

	<!-- This is the Subdialog block -->
	<form id="Subdialog_InsertMasterData">

		<subdialog name="Subdialog_InsertMasterDataSubdialog" fetchhint="prefetch"  src="../src-gen/sub_InsertMasterData.vxml">
    		<param name="varActionParentId" expr="'sub_AgentTransfer'"/>
			<param name="ObjCall" expr="AppState.ObjCall" />
			<filled>
				<if cond="Subdialog_InsertMasterDataSubdialog.ObjCall != 'undefined'">
  					<assign name="AppState.ObjCall" expr="Subdialog_InsertMasterDataSubdialog.ObjCall" /> 
  				</if>
				<goto next="#Transfer_RoutePoint" />
			</filled>
		</subdialog>
		
    	<catch event="error.semantic">
    <goto next="#Transfer_RoutePoint" />
    	</catch>
    	<catch event="error.badfetch">
    <goto next="#Transfer_RoutePoint" />
    	</catch>
    	<catch event="error">
    <goto next="#Transfer_RoutePoint" />
    	</catch>
	</form>

	<!-- This is the Assign block -->
	<form id="ECMAScript_AssigntoCallEndReason">
		<block>
			<script>
				AppState.ObjCall.vCallEndReason='9';
					__Log('AppState.ObjCall.vCallEndReason :  '+AppState.ObjCall.vCallEndReason);
					AppState.ObjCall.vCallEndReason=getcallendreason(AppState.ObjCall.vCallEndReason);
					__Log('AppState.ObjCall.vCallEndReason After JS function :  '+AppState.ObjCall.vCallEndReason);
					AppState.ObjCall.vCallEndDetails='TRANSFERRED TO OFFICER';
			</script>	
			<goto next="#Subdialog_InsertMasterData" />
		</block>
	</form>

	<!-- This is the Subdialog block -->
	<form id="Copy_1_Subdialog_InsertMasterData">

		<subdialog name="Copy_1_Subdialog_InsertMasterDataSubdialog" fetchhint="prefetch"  src="../src-gen/sub_InsertMasterData.vxml">
    		<param name="varActionParentId" expr="'sub_AgentTransfer'"/>
			<param name="ObjCall" expr="AppState.ObjCall" />
			<filled>
				<if cond="Copy_1_Subdialog_InsertMasterDataSubdialog.ObjCall != 'undefined'">
  					<assign name="AppState.ObjCall" expr="Copy_1_Subdialog_InsertMasterDataSubdialog.ObjCall" /> 
  				</if>
				<goto next="#Exit_AgentTransfer" />
			</filled>
		</subdialog>
		
    	<catch event="error.semantic">
    <goto next="#Exit_AgentTransfer" />
    	</catch>
    	<catch event="error.badfetch">
    <goto next="#Exit_AgentTransfer" />
    	</catch>
    	<catch event="error">
    <goto next="#Exit_AgentTransfer" />
    	</catch>
	</form>

	<!-- This is the Assign block -->
	<form id="Copy_1_ECMAScript_AssigntoCallEndReason">
		<block>
			<script>
				AppState.ObjCall.vCallEndReason='9';
					__Log('AppState.ObjCall.vCallEndReason :  '+AppState.ObjCall.vCallEndReason);
					AppState.ObjCall.vCallEndReason=getcallendreason(AppState.ObjCall.vCallEndReason);
					__Log('AppState.ObjCall.vCallEndReason After JS function :  '+AppState.ObjCall.vCallEndReason);
					AppState.ObjCall.vCallEndDetails='TRANSFERRED TO OFFICER';
			</script>	
			<goto next="#Copy_1_Subdialog_InsertMasterData" />
		</block>
	</form>

	<!-- This is the Assign block -->
	<form id="ECMAScript_OPM_Status">
		<block>
			<script>
				try {
					
					if(AppState.vOPMValues.Result == 'SUCCESS'){
						AppState.ObjCall.vTrav1=AppState.ObjCall.vTrav1+';AT_OPMS;';
						__Log('****AppState.ObjCall.vTrav1 is :  ' +AppState.ObjCall.vTrav1);
						}else{
						AppState.ObjCall.vTrav1=AppState.ObjCall.vTrav1+';AT_OPMF;';
						__Log('****AppState.ObjCall.vTrav1 is :  ' +AppState.ObjCall.vTrav1);
					}
					
					} catch (error) {
						// error handling code
					}
			</script>	
			<goto next="#Log_TransDestinationOut" />
		</block>
	</form>

	<!-- This is the Branching_65006 block in Disabled mode -->
	<form id="Branching_65006">
    	<block>	
    		<goto next="#Assign1" />
    	</block>
	</form>

	<!-- This is the Assign1 block in Disabled mode -->
	<form id="Assign1">
    	<block>
    		<goto next="#Log1" />
    	</block>
	</form>

	<!-- This is the Branching_Time block in Disabled mode -->
	<form id="Branching_Time">
    	<block>	
    		<goto next="#Branching1" />
    	</block>
	</form>

	<!-- This is the Branching1 block in Disabled mode -->
	<form id="Branching1">
    	<block>	
    		<goto next="#ECMAScript_AssigntoCallEndReason" />
    	</block>
	</form>

	<!-- This is the Branching_IVRFraud block in Disabled mode -->
	<form id="Branching_IVRFraud">
    	<block>	
    		<goto next="#ECMAScript_AssigntoCallEndReason" />
    	</block>
	</form>

</vxml>
